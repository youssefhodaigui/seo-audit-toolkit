name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests every Monday at 9am UTC
    - cron: '0 9 * * 1'

jobs:
  python-tests:
    name: Python Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 python --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 python --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pytest tests/test_*.py -v --cov=python --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage.xml
        flags: python
        name: Python Coverage

  javascript-tests:
    name: JavaScript Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['14.x', '16.x', '18.x', '20.x']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint --if-present
    
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '18.x' && matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage/lcov.info
        flags: javascript
        name: JavaScript Coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [python-tests, javascript-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Install Node dependencies
      run: npm ci
    
    - name: Run integration tests
      env:
        RUN_INTEGRATION_TESTS: true
      run: |
        pytest tests/test_*.py -v -m integration
        npm run test:integration --if-present

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true
    
    - name: Run npm audit
      run: |
        npm audit --audit-level=high
      continue-on-error: true

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme myst-parser
    
    - name: Check documentation
      run: |
        # Verify all markdown files are valid
        find . -name "*.md" -type f -exec python -m markdown {} \; > /dev/null

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [python-tests, javascript-tests, integration-tests]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create Release Notes
      id: release_notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        # Extract release notes from CHANGELOG.md
        sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$ d' > release_notes.md
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.release_notes.outputs.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: false

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [python-tests, javascript-tests]
    if: always()
    
    steps:
    - name: Send notification
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "CI/CD Pipeline completed"
        # Add your notification logic here (Slack, Discord, email, etc.)

# Workflow Status Badge URLs:
# Python Tests: https://github.com/youssefhodaigui/seo-audit-toolkit/workflows/CI%2FCD%20Pipeline/badge.svg?branch=main&job=python-tests
# JavaScript Tests: https://github.com/youssefhodaigui/seo-audit-toolkit/workflows/CI%2FCD%20Pipeline/badge.svg?branch=main&job=javascript-tests
